#!/usr/bin/env ruby

bef_require = Time.now

require 'dotcfg'
require 'mudbug'

$VERBOSE = ARGV.delete '--verbose'
Mudbug.log_level = :info if $VERBOSE
if ARGV.delete '--debug'
  Mudbug.log_level = :debug
  $VERBOSE = true
end

puts "Required in #{Time.now - bef_require} seconds" if $VERBOSE
bef_config = Time.now

CONFIG = DotCfg.new '~/.mudbug', :json
RESET_ARG = '--reset'

puts "Loaded in #{Time.now - bef_config} seconds" if $VERBOSE

START = Time.now

def usage(msg = nil)
  print "ERROR: #{msg}\n\n" if msg
  puts <<EOF
USAGE:
  mb [get|delete] [$path]           - GET or DELETE $path
  mb [post|put] [$path] [-|"$json"] - POST or PUT payload to $path

  * method, path, and payload, if configured, are not required arguments
  * valid methods: get, post, put, patch, delete
  * path may be a path like /foo or a full URL like http://foo.com/bar
  * payload must be valid JSON
  * payload should be provided via STDIN or a properly escaped quoted arg

CONFIGURATION:
  mb config [--reset]               - Display or reset the overall config
  mb config $CONFIG_ITEM [--reset]  - Display or reset $CONFIG_ITEM
  mb config host|method|path $val   - set host to $val
  mb config accept $val1 [$val2]    - set accept to multiple values
  mb config payload -|"$json"       - set payload from STDIN or $json

  * CONFIG_ITEMS: host, accept, method, path, payload
  * valid accepts: json, html, text

OPTIONS:
  --verbose     - log level INFO and extra output
  --debug       - log level DEBUG
EOF
  puts
  puts "CONFIG: #{CONFIG.pretty}"

  exit 1
end

def conclude(msg)
  puts msg
  puts "Completed in #{Time.now - START} seconds" if $VERBOSE
  exit 0
end

#
# Config section: handle commands that manipulate CONFIG
# Should exit in all recognized cases with conclude()
#

# don't consume ARGV here
cfg_cmd = ARGV.first

if cfg_cmd and cfg_cmd.downcase == 'config'
  ARGV.shift

  cfg_key = ARGV.shift
  conclude "CONFIG: #{CONFIG.pretty}" unless cfg_key

  cfg_key = cfg_key.downcase
  case cfg_key
  when RESET_ARG
    CONFIG.reset
    puts "CONFIG was reset"

  when 'host', 'method', 'path'
    val = ARGV.shift
    if val and !val.empty?
      if val.downcase == RESET_ARG
        CONFIG.delete cfg_key
        CONFIG.save
        puts "#{cfg_key} was reset"
      else
        CONFIG[cfg_key] = val
        CONFIG.save
      end
    else
      val = CONFIG[cfg_key]
      puts (val ? "#{cfg_key}: #{val}" : "#{cfg_key} is not set")
    end

  when 'payload'
    val = ARGV.shift
    if val and !val.empty?
      case val.downcase
      when RESET_ARG
        CONFIG.delete 'payload'
        CONFIG.save
        puts 'payload was reset'
      when '-'
        begin
          CONFIG['payload'] = JSON.parse $stdin.read
          CONFIG.save
        rescue JSON::ParserError => e
          puts "#{e.class} - #{e}"
        end
      else
        begin
          CONFIG['payload'] = JSON.parse val
          CONFIG.save
        rescue JSON::ParserError => e
          puts "#{e.class} - #{e}"
        end
      end
    else
      val = CONFIG['payload'] && JSON.pretty_generate(CONFIG['payload'])
      puts (val ? "payload: #{val}" : "payload is not set")
    end

  when 'accept'
    accepts = []
    accepts << ARGV.shift until ARGV.empty?

    if accepts.length == 1
      if accepts.first == RESET_ARG
        accepts.shift
        CONFIG.delete 'accept'
        CONFIG.save
        puts 'accept was reset'
      else
        # did they provide a quoted or CSV list? or pseudo-symbols with colons?
        accepts = accepts.first.split(/[ ,:]+/).select { |s| !s.empty? }
      end
    end
    if accepts.length > 0
      CONFIG['accept'] = accepts.map { |s| s.gsub /[ ,:]+/, '' }
      CONFIG.save
    else
      val = CONFIG['accept']
      puts (val ? "accept: " + val.join(' ') : "accept is not set")
    end
  end
  conclude "CONFIG: #{CONFIG.pretty}"
end

#
# OK, we're not manipulating CONFIG
# Create Mudbug, determine method and path - from CONFIG and cmd line args
#

mb = Mudbug.new

# set the host and Accept if configured
#
mb.host = CONFIG['host'] if CONFIG['host']
mb.accept CONFIG['accept'].map(&:to_sym) if CONFIG['accept']

# set the method, possibly from CLI args
#
case ARGV.first
when 'get', 'post', 'put', 'delete'# , 'patch'   # Soon(tm)
  method = ARGV.shift
else
  method = CONFIG['method'] or usage "no method provided"
end

# set the path, possibly from CLI args
#
case ARGV.first
when %r{^\/|http} # starts with a slash or http
  path = ARGV.shift
else
  path = CONFIG['path'] or usage "no path provided"
end

# determine method
# gather payload as required
# create args for sending the request
#
case method
when 'get', 'delete'
  args = [method, path]
when 'post', 'put', 'patch'
  # get payload
  case ARGV.first
  when nil
    payload = CONFIG['payload'] or usage "no payload provided"
  when '-'
    begin
      payload = JSON.parse $stdin.read
    rescue
      usage "could not parse payload:\n#{payload.inspect}"
    end
  end
  args = [method, path, payload]
else
  usage "Bad HTTP method #{method}"
end

#
# finally!
#

puts "Configured in #{Time.now - START} seconds" if $VERBOSE

begin
  data = mb.send(*args)
rescue RuntimeError => e
  puts "#{e} - #{e.class}"
  exit 1
end

data = JSON.pretty_generate data unless data.is_a? String
conclude data
