#!/usr/bin/env ruby

def usage(msg = nil)
  puts "ERROR: #{msg}" if msg
  puts <<USAGE
USAGE:
  mb host [HOST]           - Set or display the current host
  mb get|delete PATH       - GET or DELETE PATH
  mb post|put PATH PAYLOAD - POST or PUT PAYLOAD to PATH
USAGE
end

def conclude(msg)
  puts msg
  exit 0
end

require 'mudbug'

SAVE_FILE = File.expand_path '~/.mudbug'
FILE_EXPIRY = 3600 # seconds

class Mudbug
  def self.save host
    raise "unable to write to #{SAVE_FILE}" unless File.writable? SAVE_FILE
    File.open(SAVE_FILE, 'w') { |f| f.write host }
  end

  def self.load
    File.open(SAVE_FILE, 'r') { |f| f.read } if self.fresh?
  end

  def self.fresh?
    if File.exists?(SAVE_FILE) and File.readable?(SAVE_FILE)
      Time.now - File.mtime(SAVE_FILE) < FILE_EXPIRY
    end
  end
end

cmd = ARGV.shift or raise "provide a command"

case cmd.downcase
when 'host'
  host = ARGV.shift
  if host and !host.empty?
    Mudbug.save host
  else
    host = Mudbug.load or conclude "no host is set"
  end
  puts "Using host #{host}"
  exit 0
when 'get', 'post', 'put', 'del', 'delete'
  host = Mudbug.load or conclude "no host is set"
  path = ARGV.shift or usage "provide a path"
  mb = Mudbug.new host
else
  usage "unknown command #{cmd}"
end

case cmd.downcase
when 'get'
  data = mb.get path
  puts JSON.pretty_generate data
when 'del', 'delete'
  data = mb.delete path
  puts JSON.pretty_generate data
when 'post', 'put', 'patch'
  payload = ARGV.shift or usage "provide a payload"
  if JSON.parse(payload)
    data = mb.send(cmd.downcase, path, payload)
    puts JSON.pretty_generate data
  else
    raise "could not parse payload:\n#{payload.inspect}"
  end
end
